// Code generated by protoc-gen-go.
// source: stela.proto
// DO NOT EDIT!

/*
Package stela is a generated protocol buffer package.

It is generated from these files:
	stela.proto

It has these top-level messages:
	ServiceMessage
	AddClientRequest
	ConnectRequest
	SubscribeRequest
	RegisterRequest
	DiscoverRequest
	DiscoverAllRequest
	AddClientResponse
	SubscribeResponse
	RegisterResponse
	NotifyResponse
	DiscoverResponse
*/
package stela

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceMessage struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	Priority int32  `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	Action   int32  `protobuf:"varint,6,opt,name=action" json:"action,omitempty"`
}

func (m *ServiceMessage) Reset()                    { *m = ServiceMessage{} }
func (m *ServiceMessage) String() string            { return proto.CompactTextString(m) }
func (*ServiceMessage) ProtoMessage()               {}
func (*ServiceMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceMessage) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *ServiceMessage) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ServiceMessage) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServiceMessage) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *ServiceMessage) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

// Request
type AddClientRequest struct {
	ClientAddress string `protobuf:"bytes,1,opt,name=client_address,json=clientAddress" json:"client_address,omitempty"`
}

func (m *AddClientRequest) Reset()                    { *m = AddClientRequest{} }
func (m *AddClientRequest) String() string            { return proto.CompactTextString(m) }
func (*AddClientRequest) ProtoMessage()               {}
func (*AddClientRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddClientRequest) GetClientAddress() string {
	if m != nil {
		return m.ClientAddress
	}
	return ""
}

type ConnectRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConnectRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type SubscribeRequest struct {
	ClientId    string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubscribeRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *SubscribeRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type RegisterRequest struct {
	ClientId string          `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
	Service  *ServiceMessage `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RegisterRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *RegisterRequest) GetService() *ServiceMessage {
	if m != nil {
		return m.Service
	}
	return nil
}

type DiscoverRequest struct {
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *DiscoverRequest) Reset()                    { *m = DiscoverRequest{} }
func (m *DiscoverRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverRequest) ProtoMessage()               {}
func (*DiscoverRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DiscoverRequest) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

type DiscoverAllRequest struct {
}

func (m *DiscoverAllRequest) Reset()                    { *m = DiscoverAllRequest{} }
func (m *DiscoverAllRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverAllRequest) ProtoMessage()               {}
func (*DiscoverAllRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// Response
type AddClientResponse struct {
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId" json:"client_id,omitempty"`
}

func (m *AddClientResponse) Reset()                    { *m = AddClientResponse{} }
func (m *AddClientResponse) String() string            { return proto.CompactTextString(m) }
func (*AddClientResponse) ProtoMessage()               {}
func (*AddClientResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddClientResponse) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type SubscribeResponse struct {
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type NotifyResponse struct {
}

func (m *NotifyResponse) Reset()                    { *m = NotifyResponse{} }
func (m *NotifyResponse) String() string            { return proto.CompactTextString(m) }
func (*NotifyResponse) ProtoMessage()               {}
func (*NotifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type DiscoverResponse struct {
	Services []*ServiceMessage `protobuf:"bytes,1,rep,name=services" json:"services,omitempty"`
}

func (m *DiscoverResponse) Reset()                    { *m = DiscoverResponse{} }
func (m *DiscoverResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverResponse) ProtoMessage()               {}
func (*DiscoverResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DiscoverResponse) GetServices() []*ServiceMessage {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*ServiceMessage)(nil), "stela.ServiceMessage")
	proto.RegisterType((*AddClientRequest)(nil), "stela.AddClientRequest")
	proto.RegisterType((*ConnectRequest)(nil), "stela.ConnectRequest")
	proto.RegisterType((*SubscribeRequest)(nil), "stela.SubscribeRequest")
	proto.RegisterType((*RegisterRequest)(nil), "stela.RegisterRequest")
	proto.RegisterType((*DiscoverRequest)(nil), "stela.DiscoverRequest")
	proto.RegisterType((*DiscoverAllRequest)(nil), "stela.DiscoverAllRequest")
	proto.RegisterType((*AddClientResponse)(nil), "stela.AddClientResponse")
	proto.RegisterType((*SubscribeResponse)(nil), "stela.SubscribeResponse")
	proto.RegisterType((*RegisterResponse)(nil), "stela.RegisterResponse")
	proto.RegisterType((*NotifyResponse)(nil), "stela.NotifyResponse")
	proto.RegisterType((*DiscoverResponse)(nil), "stela.DiscoverResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stela service

type StelaClient interface {
	AddClient(ctx context.Context, in *AddClientRequest, opts ...grpc.CallOption) (*AddClientResponse, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Stela_ConnectClient, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Deregister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	NotifyClients(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*NotifyResponse, error)
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	DiscoverOne(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*ServiceMessage, error)
	DiscoverAll(ctx context.Context, in *DiscoverAllRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	// Peer related RPC is used to request all peer members
	PeerDiscover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	PeerDiscoverOne(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*ServiceMessage, error)
	PeerDiscoverAll(ctx context.Context, in *DiscoverAllRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
}

type stelaClient struct {
	cc *grpc.ClientConn
}

func NewStelaClient(cc *grpc.ClientConn) StelaClient {
	return &stelaClient{cc}
}

func (c *stelaClient) AddClient(ctx context.Context, in *AddClientRequest, opts ...grpc.CallOption) (*AddClientResponse, error) {
	out := new(AddClientResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/AddClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Stela_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Stela_serviceDesc.Streams[0], c.cc, "/stela.Stela/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &stelaConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stela_ConnectClient interface {
	Recv() (*ServiceMessage, error)
	grpc.ClientStream
}

type stelaConnectClient struct {
	grpc.ClientStream
}

func (x *stelaConnectClient) Recv() (*ServiceMessage, error) {
	m := new(ServiceMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stelaClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) Unsubscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/Unsubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) Deregister(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/Deregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) NotifyClients(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/NotifyClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/Discover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) DiscoverOne(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*ServiceMessage, error) {
	out := new(ServiceMessage)
	err := grpc.Invoke(ctx, "/stela.Stela/DiscoverOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) DiscoverAll(ctx context.Context, in *DiscoverAllRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/DiscoverAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) PeerDiscover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/PeerDiscover", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) PeerDiscoverOne(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*ServiceMessage, error) {
	out := new(ServiceMessage)
	err := grpc.Invoke(ctx, "/stela.Stela/PeerDiscoverOne", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stelaClient) PeerDiscoverAll(ctx context.Context, in *DiscoverAllRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := grpc.Invoke(ctx, "/stela.Stela/PeerDiscoverAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stela service

type StelaServer interface {
	AddClient(context.Context, *AddClientRequest) (*AddClientResponse, error)
	Connect(*ConnectRequest, Stela_ConnectServer) error
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Unsubscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Deregister(context.Context, *RegisterRequest) (*RegisterResponse, error)
	NotifyClients(context.Context, *ServiceMessage) (*NotifyResponse, error)
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	DiscoverOne(context.Context, *DiscoverRequest) (*ServiceMessage, error)
	DiscoverAll(context.Context, *DiscoverAllRequest) (*DiscoverResponse, error)
	// Peer related RPC is used to request all peer members
	PeerDiscover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	PeerDiscoverOne(context.Context, *DiscoverRequest) (*ServiceMessage, error)
	PeerDiscoverAll(context.Context, *DiscoverAllRequest) (*DiscoverResponse, error)
}

func RegisterStelaServer(s *grpc.Server, srv StelaServer) {
	s.RegisterService(&_Stela_serviceDesc, srv)
}

func _Stela_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/AddClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).AddClient(ctx, req.(*AddClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StelaServer).Connect(m, &stelaConnectServer{stream})
}

type Stela_ConnectServer interface {
	Send(*ServiceMessage) error
	grpc.ServerStream
}

type stelaConnectServer struct {
	grpc.ServerStream
}

func (x *stelaConnectServer) Send(m *ServiceMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Stela_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).Unsubscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).Deregister(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_NotifyClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).NotifyClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/NotifyClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).NotifyClients(ctx, req.(*ServiceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/Discover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_DiscoverOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).DiscoverOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/DiscoverOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).DiscoverOne(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_DiscoverAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).DiscoverAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/DiscoverAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).DiscoverAll(ctx, req.(*DiscoverAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_PeerDiscover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).PeerDiscover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/PeerDiscover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).PeerDiscover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_PeerDiscoverOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).PeerDiscoverOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/PeerDiscoverOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).PeerDiscoverOne(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stela_PeerDiscoverAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StelaServer).PeerDiscoverAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stela.Stela/PeerDiscoverAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StelaServer).PeerDiscoverAll(ctx, req.(*DiscoverAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stela_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stela.Stela",
	HandlerType: (*StelaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClient",
			Handler:    _Stela_AddClient_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _Stela_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _Stela_Unsubscribe_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Stela_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Stela_Deregister_Handler,
		},
		{
			MethodName: "NotifyClients",
			Handler:    _Stela_NotifyClients_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _Stela_Discover_Handler,
		},
		{
			MethodName: "DiscoverOne",
			Handler:    _Stela_DiscoverOne_Handler,
		},
		{
			MethodName: "DiscoverAll",
			Handler:    _Stela_DiscoverAll_Handler,
		},
		{
			MethodName: "PeerDiscover",
			Handler:    _Stela_PeerDiscover_Handler,
		},
		{
			MethodName: "PeerDiscoverOne",
			Handler:    _Stela_PeerDiscoverOne_Handler,
		},
		{
			MethodName: "PeerDiscoverAll",
			Handler:    _Stela_PeerDiscoverAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Stela_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stela.proto",
}

func init() { proto.RegisterFile("stela.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x69, 0xf3, 0x35, 0x69, 0x93, 0x74, 0x80, 0xd6, 0x84, 0x4b, 0x59, 0x09, 0xa9, 0x17,
	0x4a, 0x29, 0x5c, 0x10, 0xe2, 0x23, 0x4d, 0x11, 0xe2, 0x40, 0x41, 0x8e, 0x38, 0x47, 0x8e, 0x3d,
	0x94, 0x95, 0x5c, 0x6f, 0xd8, 0xdd, 0x56, 0xea, 0xdf, 0xe1, 0x9f, 0xf1, 0x4f, 0x90, 0xd7, 0xeb,
	0x75, 0xe2, 0x34, 0x55, 0xd5, 0xdc, 0xbc, 0x6f, 0xf7, 0xcd, 0xbc, 0x79, 0xf3, 0xa2, 0x40, 0x47,
	0x69, 0x4a, 0xc2, 0xc3, 0x99, 0x14, 0x5a, 0x60, 0xdd, 0x1c, 0xd8, 0x5f, 0x0f, 0xba, 0x63, 0x92,
	0x57, 0x3c, 0xa2, 0x6f, 0xa4, 0x54, 0x78, 0x4e, 0x88, 0xb0, 0x99, 0x86, 0x17, 0xe4, 0x7b, 0xfb,
	0xde, 0x41, 0x3b, 0x30, 0xdf, 0x38, 0x80, 0xd6, 0x6f, 0xa1, 0xb4, 0xc1, 0x1f, 0x18, 0xdc, 0x9d,
	0xd1, 0x87, 0x66, 0x18, 0xc7, 0x92, 0x94, 0xf2, 0x37, 0xcc, 0x55, 0x71, 0xcc, 0x2a, 0xcd, 0x84,
	0xd4, 0xfe, 0xe6, 0xbe, 0x77, 0x50, 0x0f, 0xcc, 0x77, 0x56, 0x69, 0x26, 0xb9, 0x90, 0x5c, 0x5f,
	0xfb, 0x75, 0x83, 0xbb, 0x33, 0xee, 0x42, 0x23, 0x8c, 0x34, 0x17, 0xa9, 0xdf, 0x30, 0x37, 0xf6,
	0xc4, 0xde, 0x42, 0x7f, 0x18, 0xc7, 0xa3, 0x84, 0x53, 0xaa, 0x03, 0xfa, 0x73, 0x49, 0x4a, 0xe3,
	0x73, 0xe8, 0x46, 0x06, 0x98, 0x14, 0xcd, 0x73, 0xbd, 0xdb, 0x39, 0x3a, 0xcc, 0x41, 0xf6, 0x02,
	0xba, 0x23, 0x91, 0xa6, 0x14, 0x39, 0xe2, 0x53, 0x68, 0x5b, 0x22, 0x8f, 0x2d, 0xa7, 0x95, 0x03,
	0x5f, 0x63, 0x16, 0x40, 0x7f, 0x7c, 0x39, 0x55, 0x91, 0xe4, 0x53, 0xba, 0x0b, 0x01, 0x9f, 0xc1,
	0x96, 0xca, 0xed, 0x9b, 0xcc, 0x99, 0xd3, 0xb1, 0xd8, 0x59, 0x78, 0x41, 0x6c, 0x02, 0xbd, 0x80,
	0xce, 0xb9, 0xd2, 0x24, 0xef, 0x54, 0xf2, 0x25, 0x34, 0x2d, 0xdd, 0x54, 0xeb, 0x1c, 0x3f, 0x3e,
	0xcc, 0x17, 0xb7, 0xb8, 0xa7, 0xa0, 0x78, 0xc5, 0xde, 0x40, 0xef, 0x94, 0xab, 0x48, 0x5c, 0x95,
	0x0d, 0xaa, 0xb2, 0xbc, 0x65, 0x59, 0x8f, 0x00, 0x0b, 0xd6, 0x30, 0x49, 0x2c, 0x91, 0x1d, 0xc1,
	0xce, 0x9c, 0xd5, 0x6a, 0x26, 0x52, 0x45, 0xb7, 0x5b, 0xf6, 0x10, 0x76, 0xe6, 0x2c, 0xcb, 0x19,
	0x0c, 0xa1, 0x5f, 0xce, 0x6c, 0xb1, 0x3e, 0x74, 0xcf, 0x84, 0xe6, 0xbf, 0xae, 0x1d, 0xf2, 0x19,
	0xfa, 0xa5, 0x70, 0xdb, 0xeb, 0x15, 0xb4, 0xac, 0xca, 0x6c, 0xa3, 0x1b, 0xab, 0xc7, 0x77, 0xcf,
	0x8e, 0xff, 0x35, 0xa0, 0x3e, 0xce, 0x9e, 0xe0, 0x27, 0x68, 0x3b, 0xf5, 0xb8, 0x67, 0x79, 0xd5,
	0xe8, 0x0c, 0xfc, 0xe5, 0x0b, 0x2b, 0xa8, 0x86, 0xef, 0xa0, 0x69, 0xf3, 0x82, 0x45, 0xdf, 0xc5,
	0xfc, 0x0c, 0x6e, 0x96, 0xc3, 0x6a, 0x47, 0x5e, 0xd6, 0xde, 0x59, 0xe1, 0xda, 0x57, 0xf3, 0xe4,
	0xda, 0x2f, 0xbb, 0x56, 0xc3, 0x13, 0xe8, 0xfc, 0x4c, 0xd5, 0x7a, 0x35, 0xde, 0x43, 0xab, 0xf0,
	0x1e, 0x77, 0xed, 0xbb, 0x4a, 0x00, 0x07, 0x7b, 0x4b, 0xb8, 0xa3, 0x7f, 0x04, 0x38, 0x25, 0xb9,
	0x56, 0x81, 0xed, 0x7c, 0xcf, 0xb9, 0xb9, 0x0a, 0x6f, 0x76, 0xcc, 0x19, 0x59, 0x09, 0x85, 0x19,
	0xa0, 0x88, 0x85, 0xeb, 0x5f, 0x09, 0xb8, 0xeb, 0x5f, 0xcd, 0x0f, 0xab, 0xe1, 0x07, 0xe8, 0x14,
	0xe8, 0xf7, 0x94, 0x56, 0x56, 0x58, 0xb5, 0x47, 0x1c, 0x95, 0xfc, 0x61, 0x92, 0xe0, 0x93, 0x0a,
	0xbf, 0xfc, 0xb1, 0xdc, 0x26, 0x62, 0x08, 0x5b, 0x3f, 0x88, 0xe4, 0x3a, 0x73, 0x9c, 0x40, 0x6f,
	0xbe, 0xc4, 0xbd, 0x66, 0xf9, 0xb2, 0x58, 0xe3, 0xde, 0xf3, 0x4c, 0x1b, 0xe6, 0x5f, 0xe3, 0xf5,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0xdb, 0x86, 0x5d, 0x44, 0x06, 0x00, 0x00,
}
